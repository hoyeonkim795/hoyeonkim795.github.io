<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hoyeonkim795.github.io/</id><title>Hoyeon</title><subtitle>햄찌 어멈 개발자, Hoyeon github blog. Computer Science, Projects. </subtitle> <updated>2024-07-01T00:19:15+09:00</updated> <author> <name>hoyeonkim</name> <uri>https://hoyeonkim795.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hoyeonkim795.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hoyeonkim795.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2024 hoyeonkim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[부동산] 서울아파트 거래량</title><link href="https://hoyeonkim795.github.io/posts/%EB%B6%80%EB%8F%99%EC%82%B0-%EA%B1%B0%EB%9E%98%EB%9F%89/" rel="alternate" type="text/html" title="[부동산] 서울아파트 거래량" /><published>2024-06-27T13:00:00+09:00</published> <updated>2024-07-01T00:18:41+09:00</updated> <id>https://hoyeonkim795.github.io/posts/%EB%B6%80%EB%8F%99%EC%82%B0-%EA%B1%B0%EB%9E%98%EB%9F%89/</id> <content src="https://hoyeonkim795.github.io/posts/%EB%B6%80%EB%8F%99%EC%82%B0-%EA%B1%B0%EB%9E%98%EB%9F%89/" /> <author> <name>hoyeonkim</name> </author> <category term="Real Estate" /> <category term="Seoul" /> <summary> 상속 ```html </summary> </entry> <entry><title>[Programming] C++ 상속</title><link href="https://hoyeonkim795.github.io/posts/Programming-C++-%EC%83%81%EC%86%8D/" rel="alternate" type="text/html" title="[Programming] C++ 상속" /><published>2022-02-09T19:32:30+09:00</published> <updated>2022-02-09T19:32:30+09:00</updated> <id>https://hoyeonkim795.github.io/posts/Programming-C++-%EC%83%81%EC%86%8D/</id> <content src="https://hoyeonkim795.github.io/posts/Programming-C++-%EC%83%81%EC%86%8D/" /> <author> <name>hoyeonkim</name> </author> <category term="Programming Language" /> <category term="C++" /> <summary> 상속 상속 문법 사용하기 공통의 특징을 모은 클래스를 설계한다. class Person { std::string name; int age; }; class Professor : public Person { int major; }; class Student : public Person { int id; }; int main () { Professor p; Student s; } 한 클래스가 다른 클래스에서 정의된 속성들(데이터, 함수)를 이어 받아서 사용하는 것 이미 정의도니 클래스를 기반으로 새로운 클래스 설계 S/W의 재사용성 지원 상속 문법... </summary> </entry> <entry><title>[Programming] C++ 상수 멤버 함수와 this</title><link href="https://hoyeonkim795.github.io/posts/Programming-C++-%EC%83%81%EC%88%98-%EB%A9%A4%EB%B2%84-%ED%95%A8%EC%88%98%EC%99%80-this/" rel="alternate" type="text/html" title="[Programming] C++ 상수 멤버 함수와 this" /><published>2022-02-09T18:32:30+09:00</published> <updated>2024-06-29T12:15:08+09:00</updated> <id>https://hoyeonkim795.github.io/posts/Programming-C++-%EC%83%81%EC%88%98-%EB%A9%A4%EB%B2%84-%ED%95%A8%EC%88%98%EC%99%80-this/</id> <content src="https://hoyeonkim795.github.io/posts/Programming-C++-%EC%83%81%EC%88%98-%EB%A9%A4%EB%B2%84-%ED%95%A8%EC%88%98%EC%99%80-this/" /> <author> <name>hoyeonkim</name> </author> <category term="Programming Language" /> <category term="C++" /> <summary> 상수 멤버 함수와 this void print() const { x = 20; } 함수 선언 및 구현시 “함수 괄호 () 뒤에 const 가 붙는 함수” void print() const 상수 멤버 함수 안에서는 “모든 멤버를 상수 취급” 멤버 데이터의 값을 읽을 수는 있지만 “변경할 수 는 없다” 상수 멤버 함수를 사용하는 “중요한 이유” 코드 작성시 안정성 상수 객체는 상수 멤버 함수만 호출 할 수 있다. 상수 객체는 상수 멤버 함수만 호출할 수 있다. 상수 객체의 상태를 변경할 수 없다. 하지만 “상태를 얻거나 출력 할 수는 있어야” 한다. 사용자 정의 타입을 함수로 전달할 때 call by value 보다는 con... </summary> </entry> <entry><title>[Golang] goroutine channel</title><link href="https://hoyeonkim795.github.io/posts/Golang-goroutine-channel/" rel="alternate" type="text/html" title="[Golang] goroutine channel" /><published>2021-12-19T14:21:40+09:00</published> <updated>2021-12-20T15:24:53+09:00</updated> <id>https://hoyeonkim795.github.io/posts/Golang-goroutine-channel/</id> <content src="https://hoyeonkim795.github.io/posts/Golang-goroutine-channel/" /> <author> <name>hoyeonkim</name> </author> <category term="Programming Language" /> <category term="Golang" /> <summary> Goroutine 고루틴을 알기 전에, 쓰레드부터 알아보자! 쓰레드란는 실행 흐름을 말한다. 프로그램이 실행되면 메모리에 로드가 된다. 기계어 다발의 코드들이 메인함수부터 CPU가 IP를 하나씩 늘려가며 하나의 방향 흐름 으로 실행된다. 멀티쓰레드는 여러개의 실행 흐름이다. 코어(CPU) 가 번갈아가며 쓰레드를 실행시키면서 우리눈에는 동시에 실행되는것처럼 보인다. 사실, CPU는 가만히 있고 OS가 스케쥴링 해주는 것이다. 그런데, 쓰레드 전환시 비용이 발생한다. 이것을 컨텍스트 스위칭이라고 한다. 멀티쓰레드 vs 멀티프로세스 ? 프로그램을 실행하면 메모리에 로드 된다. 계산기 프로그램을 사용하면, 두 개의 계산기 실행 멀티쓰레드 하나의 프로세스에서도 여러 실행흐름이 있다 고루틴은 ... </summary> </entry> <entry><title>[Golang] 문법 기억 더듬기</title><link href="https://hoyeonkim795.github.io/posts/golang/" rel="alternate" type="text/html" title="[Golang] 문법 기억 더듬기" /><published>2021-12-18T14:21:40+09:00</published> <updated>2021-12-20T15:24:53+09:00</updated> <id>https://hoyeonkim795.github.io/posts/golang/</id> <content src="https://hoyeonkim795.github.io/posts/golang/" /> <author> <name>hoyeonkim</name> </author> <category term="Programming Language" /> <category term="Golang" /> <summary> Go Modules Go 패키지들의 종속성을 관리하는 패키지 관리 시스템 Go 어플리케이션 내의 종속성 문제를 처리하기 위해 도입되었다. 모듈은 패키지를 트리 형식으로 저장하고 있고, 루트에는 go.mod 파일이 존재. 저장소에는 하나 이상의 Go 모듈이 포함된다. 각 모듈에는 하나 이상의 고 패키지가 포함되어 있음. go mod GOPATH 디렉토리 바깥에 프로젝트 디랙토리를 만들 수 있다. 언제, 어디서나, 누구라도 항상 동일한 build 결과를 보장한다. functions와 methods의 차이 함수 인수 타입 리턴값 바디 defer ... </summary> </entry> </feed>
